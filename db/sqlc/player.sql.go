// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: player.sql

package db

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player (
    username
) VALUES (
    $1
) RETURNING id, username, score, health, ult_meter
`

func (q *Queries) CreatePlayer(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, username, score, health, ult_meter FROM player
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT MAX(id) FROM player LIMIT 1
`

func (q *Queries) GetPlayerById(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getPlayerById)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getPlayerHealth = `-- name: GetPlayerHealth :one
SELECT health FROM player
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlayerHealth(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPlayerHealth, id)
	var health int32
	err := row.Scan(&health)
	return health, err
}

const getPlayerScore = `-- name: GetPlayerScore :one
SELECT score FROM player
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlayerScore(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPlayerScore, id)
	var score int32
	err := row.Scan(&score)
	return score, err
}

const getPlayersUlt = `-- name: GetPlayersUlt :one
SELECT ult_meter FROM player
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlayersUlt(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPlayersUlt, id)
	var ult_meter int32
	err := row.Scan(&ult_meter)
	return ult_meter, err
}

const updatePlayerHealth = `-- name: UpdatePlayerHealth :one
UPDATE player
SET health = $2
WHERE id = $1
RETURNING id, username, score, health, ult_meter
`

type UpdatePlayerHealthParams struct {
	ID     int64 `json:"id"`
	Health int32 `json:"health"`
}

func (q *Queries) UpdatePlayerHealth(ctx context.Context, arg UpdatePlayerHealthParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerHealth, arg.ID, arg.Health)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const updatePlayerName = `-- name: UpdatePlayerName :one
UPDATE player
SET username = $2
WHERE id = $1
RETURNING id, username, score, health, ult_meter
`

type UpdatePlayerNameParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdatePlayerName(ctx context.Context, arg UpdatePlayerNameParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerName, arg.ID, arg.Username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const updatePlayersUlt = `-- name: UpdatePlayersUlt :one
UPDATE player
SET ult_meter = $2
WHERE id = $1
RETURNING id, username, score, health, ult_meter
`

type UpdatePlayersUltParams struct {
	ID       int64 `json:"id"`
	UltMeter int32 `json:"ult_meter"`
}

func (q *Queries) UpdatePlayersUlt(ctx context.Context, arg UpdatePlayersUltParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayersUlt, arg.ID, arg.UltMeter)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const updateScore = `-- name: UpdateScore :one
UPDATE player
SET score = score + 1
WHERE id = $1
RETURNING id, username, score, health, ult_meter
`

func (q *Queries) UpdateScore(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, updateScore, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

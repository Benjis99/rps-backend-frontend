// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: player.sql

package db

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player (
    username
) VALUES (
    $1
) RETURNING id, username, score, health, ult_meter
`

func (q *Queries) CreatePlayer(ctx context.Context, username sql.NullString) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, username, score, health, ult_meter FROM player
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, username sql.NullString) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const updatePlayerHealth = `-- name: UpdatePlayerHealth :one
UPDATE player
SET health = $2
WHERE username = $1
RETURNING id, username, score, health, ult_meter
`

type UpdatePlayerHealthParams struct {
	Username sql.NullString `json:"username"`
	Health   int32          `json:"health"`
}

func (q *Queries) UpdatePlayerHealth(ctx context.Context, arg UpdatePlayerHealthParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerHealth, arg.Username, arg.Health)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}

const updatePlayerName = `-- name: UpdatePlayerName :one
UPDATE player
SET username = $2
WHERE id = $1
RETURNING id, username, score, health, ult_meter
`

type UpdatePlayerNameParams struct {
	ID       int64          `json:"id"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) UpdatePlayerName(ctx context.Context, arg UpdatePlayerNameParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerName, arg.ID, arg.Username)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Score,
		&i.Health,
		&i.UltMeter,
	)
	return i, err
}
